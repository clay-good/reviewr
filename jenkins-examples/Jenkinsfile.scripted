// Scripted Pipeline for reviewr Code Review
// This example shows how to integrate reviewr into a Jenkins scripted pipeline

node {
    // Environment variables
    env.JENKINS_URL = credentials('jenkins-url')
    env.JENKINS_USERNAME = credentials('jenkins-username')
    env.JENKINS_API_TOKEN = credentials('jenkins-api-token')
    env.OPENAI_API_KEY = credentials('openai-api-key')
    
    try {
        stage('Checkout') {
            checkout scm
        }
        
        stage('Install reviewr') {
            sh '''
                python3 -m pip install --upgrade pip
                pip install reviewr
            '''
        }
        
        stage('Code Review') {
            sh 'reviewr jenkins review --output review-report.json'
        }
        
        stage('Archive Results') {
            archiveArtifacts artifacts: 'review-report.json', fingerprint: true
        }
        
        currentBuild.result = 'SUCCESS'
    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        cleanWs()
    }
}

// ============================================================================
// Advanced Configuration with Error Handling
// ============================================================================

node {
    env.JENKINS_URL = credentials('jenkins-url')
    env.JENKINS_USERNAME = credentials('jenkins-username')
    env.JENKINS_API_TOKEN = credentials('jenkins-api-token')
    env.OPENAI_API_KEY = credentials('openai-api-key')
    
    def reviewPassed = false
    
    try {
        stage('Checkout') {
            checkout scm
        }
        
        stage('Install reviewr') {
            sh 'pip install reviewr'
        }
        
        stage('Code Review') {
            try {
                sh 'reviewr jenkins review'
                reviewPassed = true
            } catch (Exception e) {
                echo "Code review found critical issues"
                reviewPassed = false
                // Don't fail the build yet, continue to archive results
            }
        }
        
        stage('Archive Results') {
            if (fileExists('review-report.json')) {
                archiveArtifacts artifacts: 'review-report.json', fingerprint: true
            }
        }
        
        // Fail the build if review didn't pass
        if (!reviewPassed) {
            error('Code review failed - critical issues found')
        }
        
        currentBuild.result = 'SUCCESS'
    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        cleanWs()
    }
}

// ============================================================================
// Configuration with Multiple Review Types
// ============================================================================

node {
    env.JENKINS_URL = credentials('jenkins-url')
    env.JENKINS_USERNAME = credentials('jenkins-username')
    env.JENKINS_API_TOKEN = credentials('jenkins-api-token')
    env.OPENAI_API_KEY = credentials('openai-api-key')
    
    try {
        stage('Checkout') {
            checkout scm
        }
        
        stage('Install reviewr') {
            sh 'pip install reviewr'
        }
        
        stage('Security Review') {
            sh '''
                reviewr . \
                    --review-type security \
                    --security-scan \
                    --check-vulnerabilities \
                    --check-licenses \
                    --output security-report.json
            '''
        }
        
        stage('Code Quality Review') {
            sh '''
                reviewr . \
                    --review-type correctness maintainability \
                    --code-metrics \
                    --check-complexity \
                    --check-duplication \
                    --output quality-report.json
            '''
        }
        
        stage('Update Jenkins') {
            sh 'reviewr jenkins review --output combined-report.json'
        }
        
        stage('Archive Results') {
            archiveArtifacts artifacts: '*-report.json', fingerprint: true
        }
        
        currentBuild.result = 'SUCCESS'
    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        cleanWs()
    }
}

// ============================================================================
// Configuration with Conditional Execution
// ============================================================================

node {
    env.JENKINS_URL = credentials('jenkins-url')
    env.JENKINS_USERNAME = credentials('jenkins-username')
    env.JENKINS_API_TOKEN = credentials('jenkins-api-token')
    env.OPENAI_API_KEY = credentials('openai-api-key')
    
    def branch = env.BRANCH_NAME ?: 'main'
    def preset = (branch == 'main') ? 'strict' : 'quick'
    
    try {
        stage('Checkout') {
            checkout scm
        }
        
        stage('Install reviewr') {
            sh 'pip install reviewr'
        }
        
        stage("Code Review (${preset})") {
            sh "reviewr jenkins review --preset ${preset}"
        }
        
        currentBuild.result = 'SUCCESS'
    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        cleanWs()
    }
}

// ============================================================================
// Configuration with Parallel Execution
// ============================================================================

node {
    env.JENKINS_URL = credentials('jenkins-url')
    env.JENKINS_USERNAME = credentials('jenkins-username')
    env.JENKINS_API_TOKEN = credentials('jenkins-api-token')
    env.OPENAI_API_KEY = credentials('openai-api-key')
    
    try {
        stage('Checkout') {
            checkout scm
        }
        
        stage('Install reviewr') {
            sh 'pip install reviewr'
        }
        
        stage('Parallel Reviews') {
            parallel(
                'Security Review': {
                    sh '''
                        reviewr . \
                            --review-type security \
                            --security-scan \
                            --output security-report.json
                    '''
                },
                'Code Quality Review': {
                    sh '''
                        reviewr . \
                            --review-type correctness maintainability \
                            --code-metrics \
                            --output quality-report.json
                    '''
                },
                'Performance Review': {
                    sh '''
                        reviewr . \
                            --review-type performance \
                            --output performance-report.json
                    '''
                }
            )
        }
        
        stage('Update Jenkins') {
            sh 'reviewr jenkins review --output combined-report.json'
        }
        
        stage('Archive Results') {
            archiveArtifacts artifacts: '*-report.json', fingerprint: true
        }
        
        currentBuild.result = 'SUCCESS'
    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        cleanWs()
    }
}

// ============================================================================
// Configuration with Slack Notifications
// ============================================================================

node {
    env.JENKINS_URL = credentials('jenkins-url')
    env.JENKINS_USERNAME = credentials('jenkins-username')
    env.JENKINS_API_TOKEN = credentials('jenkins-api-token')
    env.OPENAI_API_KEY = credentials('openai-api-key')
    env.SLACK_WEBHOOK_URL = credentials('slack-webhook-url')
    
    try {
        stage('Checkout') {
            checkout scm
        }
        
        stage('Install reviewr') {
            sh 'pip install reviewr'
        }
        
        stage('Code Review') {
            sh '''
                reviewr jenkins review \
                    --slack \
                    --slack-channel '#code-reviews' \
                    --slack-critical-only
            '''
        }
        
        currentBuild.result = 'SUCCESS'
    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        cleanWs()
    }
}

// ============================================================================
// Configuration with Custom Build Description
// ============================================================================

node {
    env.JENKINS_URL = credentials('jenkins-url')
    env.JENKINS_USERNAME = credentials('jenkins-username')
    env.JENKINS_API_TOKEN = credentials('jenkins-api-token')
    env.OPENAI_API_KEY = credentials('openai-api-key')
    
    try {
        stage('Checkout') {
            checkout scm
        }
        
        stage('Install reviewr') {
            sh 'pip install reviewr'
        }
        
        stage('Code Review') {
            sh 'reviewr jenkins review --output review-report.json'
        }
        
        stage('Update Build Description') {
            // reviewr automatically updates the build description
            // You can also manually update it:
            // sh 'reviewr jenkins set-description "Custom description"'
        }
        
        stage('Add Badge') {
            // reviewr automatically adds a badge
            // You can also manually add badges:
            // sh 'reviewr jenkins add-badge "Custom Badge" --color green'
        }
        
        currentBuild.result = 'SUCCESS'
    } catch (Exception e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        cleanWs()
    }
}

